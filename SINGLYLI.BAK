#include<iostream.h>
#include<conio.h>
class Node
{
	public:
		int data;
		Node *next;

};
class List
{
	Node *head;

	public:
		List(){ head = NULL; }
		~List();
		Node* Insert_Node(int,int);
		void Display_List();
		int Delete_Node(int);
};
int List :: Delete_Node(int value)
{
	if(head == NULL)
	{
		cout<<"\nList is Empty";
		return 0;
	}
	Node *prev = NULL;
	Node *ptr = head;
	int index=1;
	while(ptr && ptr->data !=value)
	{
		prev = ptr;
		ptr = ptr->next;
		index++;
	}
	if(ptr)
	{
		if(prev)
		{
			prev->next = ptr->next;
			delete ptr;
		}
		else
		{
			head = ptr->next;
			delete ptr;
		}
		return index;
	}
	return 0;

}
Node* List :: Insert_Node(int value, int position)
{
	if(position<0)
	{
		return NULL;
	}
	Node *ptr = head;
	int index = 1;
	while(ptr&& index<position)
	{
		ptr = ptr->next;
		index++;
	}
	if(position>0 && ptr==NULL)
	{
		return NULL;
	}
	Node *newNode = new Node;
	newNode->data = value;

	if(index == 0)
	{
		newNode->next = head;
		head = newNode;
	}
	else
	{
		newNode->next = ptr->next;
		ptr->next = newNode;
	}
	return newNode;


}
void List :: Display_List()
{
	if(head == NULL)
	{
		cout<<"\nList is empty";
		return;
	}
	Node *ptr = head;
	int num = 0;
	cout<<"\Your List is =";
	while(ptr!=NULL)
	{
		cout<<"\t"<<ptr->data;
		ptr = ptr->next;
		num++;
	}
	cout<<"\nNumber of Nodes are="<<num;

}
List :: ~List()
{
	Node *ptr = head, *nextnode;
	while(ptr!=NULL)
	{
		nextnode = ptr->next;
		//delete the ptr;
		delete ptr;
		ptr = nextnode;

	}
}
void main()
{
	clrscr();
	List L;

	// insert_node(value,position);
	L.Insert_Node(10,0);
	L.Insert_Node(20,1);
	L.Insert_Node(40,2);
       //	L.Display_List();
       //	L.Delete_Node(10);
       //	L.Delete_Node(40);
	L.Display_List();
	getch();
}